// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

// previewFeatures = ["referentialIntegrity"] 미리보기기능 [어떤 디비랑 같이 연동되어있는지 보여줌. ex php => left join ]

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique
  email           String?     @unique
  name            String
  avatar          String?     @db.MediumText
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tokens          Token[]
  products        Product[]
  posts           Post[]
  answers         Answer[]
  wondering       Wondering[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  fav             Fav[]
  sale            Sale[]
  purchase        Purchase[]
  recode          Record[]
  streams         Stream[]
  messages        Message[]
}

//디폴트는 지금
//업데이트
//데이터

model Token {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) //user db를 지울때 토큰을 같이 지워준다.
  payload   String   @unique
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//유저의 이메일이나 폰 번호 정보를 넣어줄거다.

model Product {
  id          Int        @id @default(autoincrement())
  createAt    DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade) //product 모델의 userId 의 숫자가 references의 id라는 것이다
  userId      Int
  image       String
  name        String
  price       Float //소수점이 나올수도 있음
  description String     @db.MediumText
  favs        Fav[]
  sale        Sale[]
  purchas     Purchase[]
  recode      Record[]
}

model Post {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  latitude  Float?
  longitude Float?
  answers   Answer[]
  wondering Wondering[]
}

model Answer {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  anwer    String   @db.MediumText
}

model Wondering {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
}

model Review {
  id           Int      @id @default(autoincrement())
  review       String   @db.MediumText
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score        Int      @default(1)
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  kind      Kind
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

enum Kind {
  Purchase
  Sale
  Fav
}

model Stream {
  id          Int       @id @default(autoincrement())
  name        String
  price       Int
  description String    @db.MediumText
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  messages    Message[]
}

model Message {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  message  String   @db.MediumText
  stream   Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId Int
}

//똑같은 형태의 디비가 반복될 경우 enum 을 사용하여 하나로 합칠수 있다.
// 우리가 쓰고 있는 PlanetScale은 Vitess로 만들어졌다.
